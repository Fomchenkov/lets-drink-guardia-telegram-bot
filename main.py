#!/usr/bin/env python3

import os
import random
import logging

import telebot
from telebot import apihelper, types

import util
import main_func
import database
import config
import texts


logging.basicConfig(filename='logging.log', format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

bot = telebot.TeleBot(config.BOT_TOKEN)

READY_TO_REGISTER = {}

READY_TO_EMAIL = {}

READY_TO_EDIT_NAME = {}
READY_TO_EDIT_AGE = {}
READY_TO_EDIT_ABOUT = {}
READY_TO_EDIT_PHOTO = {}


def clean_all_ready(uid):
	"""
	–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ READY TO
	"""

	if uid in READY_TO_REGISTER:
		del READY_TO_REGISTER[uid]
	if uid in READY_TO_EMAIL:
		del READY_TO_EMAIL[uid]
	if uid in READY_TO_EDIT_NAME:
		del READY_TO_EDIT_NAME[uid]
	if uid in READY_TO_EDIT_AGE:
		del READY_TO_EDIT_AGE[uid]
	if uid in READY_TO_EDIT_ABOUT:
		del READY_TO_EDIT_ABOUT[uid]
	if uid in READY_TO_EDIT_PHOTO:
		del READY_TO_EDIT_PHOTO[uid]


@bot.message_handler(commands=['start'])
def start_command_handler(message):
	cid = message.chat.id
	uid = message.from_user.id

	logger.info('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω {!s} [{!s}]'.format(message.from_user.first_name, uid))

	clean_all_ready(uid)

	query = database.User.select().where(database.User.uid == uid)

	# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	if not query.exists():
		READY_TO_REGISTER[uid] = {}
		markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True, row_width=1)
		markup.row(message.from_user.first_name)
		return bot.send_message(cid, texts.register_ask_name, reply_markup=markup)

	markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False, row_width=1)
	for x in config.main_markup:
		markup.row(*x)
	return bot.send_message(cid, texts.allready_register, reply_markup=markup)	


@bot.message_handler(commands=['admin'])
def admin_command_handler(message):
	cid = message.chat.id
	uid = message.from_user.id

	# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
	if uid not in config.ADMINS:
		logger.info('–ù–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ {!s} [{!s}]'.format(message.from_user.first_name, uid))
		return bot.send_message(cid, texts.admin_access_denied)

	clean_all_ready(uid)	

	text = '–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å'
	markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False, row_width=1)
	for x in config.admin_markup:
		markup.row(*x)
	return bot.send_message(cid, text, reply_markup=markup)	


'''
@bot.message_handler(content_types=['location'])
def location_content_handler(message):
	cid = message.chat.id
	uid = message.from_user.id

	# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
	if uid in READY_TO_REGISTER:
		if 'about' in READY_TO_REGISTER[uid] and 'location' not in READY_TO_REGISTER[uid]:
			READY_TO_REGISTER[uid]['location'] = {
				'lat': message.location.latitude,
				'long': message.location.longitude,
			}
			logger.info('Successfuly register from {!s}'.format(message.from_user.first_name))

			# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
			user = database.User(
				uid=uid, name=READY_TO_REGISTER[uid]['name'], age=READY_TO_REGISTER[uid]['age'], 
				gender=READY_TO_REGISTER[uid]['gender'], about=READY_TO_REGISTER[uid]['about'],
				location_lat=READY_TO_REGISTER[uid]['location']['lat'],
				location_long=READY_TO_REGISTER[uid]['location']['long']
			)
			user.save()

			logger.info('–£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è {!s} [{!s}]'.format(message.from_user.first_name, uid))

			print(READY_TO_REGISTER[uid])

			del READY_TO_REGISTER[uid]
			markup = types.ReplyKeyboardRemove()
			bot.send_message(cid, texts.success_register, reply_markup=markup)

			text = '–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞:\n\n{!s}'.format(util.generate_user_text(user))
			markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False, row_width=1)
			for x in config.main_markup:
				markup.row(*x)
			return bot.send_message(cid, text, reply_markup=markup)
'''


@bot.message_handler(content_types=['photo'])
def photo_content_handler(message):
	cid = message.chat.id
	uid = message.from_user.id

	# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∞–¥–º–∏–Ω–æ–º
	if uid in READY_TO_EMAIL:
		del READY_TO_EMAIL[uid]
		file_info = bot.get_file(message.photo[-1].file_id)
		photo_path = 'photo.jpg'
		downloaded_file = bot.download_file(file_info.file_path)
		with open(photo_path, 'wb') as new_file:
			new_file.write(downloaded_file)

		followers = database.User.select()

		for x in followers:
			try:
				bot.send_photo(x.uid, open(photo_path, 'rb'), caption=message.caption)
			except Exception as e:
				print(e)
				continue

		logger.info('–†–∞—Å—Å—ã–ª–∫–∞ —Ñ–æ—Ç–æ {!s} [{!s}]'.format(message.from_user.first_name, uid))

		os.remove(photo_path)
		bot.send_message(cid, texts.success_email_text)

		text = '–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å'
		markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False, row_width=1)
		for x in config.admin_markup:
			markup.row(*x)
		return bot.send_message(cid, text, reply_markup=markup)

	# –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
	if uid in READY_TO_REGISTER:
		if 'photo' not in READY_TO_REGISTER[uid]:

			# –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–æ—Ç–æ
			file_info = bot.get_file(message.photo[-1].file_id)
			photo_path = '{!s}photo{!s}.jpg'.format(config.photos_path, uid)
			downloaded_file = bot.download_file(file_info.file_path)
			with open(photo_path, 'wb') as new_file:
				new_file.write(downloaded_file)

			READY_TO_REGISTER[uid]['photo'] = photo_path

			logger.info('–£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è {!s}'.format(message.from_user.first_name))

			# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
			user = database.User(
				uid=uid, name=READY_TO_REGISTER[uid]['name'], age=READY_TO_REGISTER[uid]['age'], 
				gender=READY_TO_REGISTER[uid]['gender'], about=READY_TO_REGISTER[uid]['about'],
				photo_path=READY_TO_REGISTER[uid]['photo']
			)
			user.save()

			logger.info('–£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è {!s} [{!s}]'.format(message.from_user.first_name, uid))

			print(READY_TO_REGISTER[uid])

			del READY_TO_REGISTER[uid]
			markup = types.ReplyKeyboardRemove()
			bot.send_message(cid, texts.success_register, reply_markup=markup)

			text = '–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞:\n\n{!s}'.format(util.generate_user_text(user))
			markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False, row_width=1)
			for x in config.main_markup:
				markup.row(*x)
			return bot.send_photo(cid, open(user.photo_path, 'rb'), caption=text, reply_markup=markup)

	# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∫–µ—Ç—ã
	if uid in READY_TO_EDIT_PHOTO:
		if 'photo' not in READY_TO_EDIT_PHOTO[uid]:

			# –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–æ—Ç–æ
			file_info = bot.get_file(message.photo[-1].file_id)
			photo_path = '{!s}photo{!s}.jpg'.format(config.photos_path, uid)
			downloaded_file = bot.download_file(file_info.file_path)
			with open(photo_path, 'wb') as new_file:
				new_file.write(downloaded_file)

			READY_TO_EDIT_PHOTO[uid]['photo'] = photo_path

			q = database.User.update({database.User.photo_path: READY_TO_EDIT_PHOTO[uid]['photo']}).where(database.User.uid == uid)
			q.execute()

			del READY_TO_EDIT_PHOTO[uid]

			logger.info('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ {!s} [{!s}]'.format(message.from_user.first_name, uid))

			text = '–í—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏ —Ñ–æ—Ç–æ'
			markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False, row_width=1)
			for x in config.main_markup:
				markup.row(*x)
			return bot.send_message(cid, text, reply_markup=markup)


@bot.message_handler(content_types=['text'])
def text_content_handler(message):
	cid = message.chat.id
	uid = message.from_user.id


	# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
	if uid in READY_TO_REGISTER:

		if 'name' not in READY_TO_REGISTER[uid]:
			READY_TO_REGISTER[uid]['name'] = message.text
			markup = types.ReplyKeyboardRemove()
			return bot.send_message(cid, texts.register_ask_age, reply_markup=markup)

		if 'age' not in READY_TO_REGISTER[uid]:
			try:
				int(message.text)
			except Exception as e:
				return bot.send_message(cid, texts.error_integer)

			# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–∏–µ
			if int(message.text) < 18:
				return bot.send_message(cid, texts.error_smaller_18_years)

			READY_TO_REGISTER[uid]['age'] = int(message.text)
			keyboard = types.InlineKeyboardMarkup()
			keyboard.add(types.InlineKeyboardButton(text='ü§µ –ú—É–∂—á–∏–Ω–∞', callback_data='registergender_0'))
			keyboard.add(types.InlineKeyboardButton(text='üëÑ –ñ–µ–Ω—â–∏–Ω–∞', callback_data='registergender_1'))
			return bot.send_message(cid, texts.register_ask_gender, reply_markup=keyboard)

		if 'gender' not in READY_TO_REGISTER[uid]:
			return bot.send_message(cid, texts.register_select_inline_gender)

		if 'about' not in READY_TO_REGISTER[uid]:
			READY_TO_REGISTER[uid]['about'] = message.text
			return bot.send_message(cid, texts.register_ask_photo)

		if 'photo' not in READY_TO_REGISTER[uid]:
			return bot.send_message(cid, texts.register_invite_photo)

	# –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–º–µ–Ω—É –¥–µ–π—Å—Ç–≤–∏–π –∞–¥–º–∏–Ω–∞
	if uid in config.ADMINS:
		if message.text == '‚ùå –û—Ç–º–µ–Ω–∞':
			if uid in READY_TO_EMAIL:
				del READY_TO_EMAIL[uid]
			text = '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ'
			bot.send_message(cid, text)
			text = '–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å'
			markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False, row_width=1)
			for x in config.admin_markup:
				markup.row(*x)
			return bot.send_message(cid, text, reply_markup=markup)

	# –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π
	if uid in READY_TO_EMAIL:
		del READY_TO_EMAIL[uid]
		
		followers = database.User.select()

		for x in followers:
			try:
				bot.send_message(x.uid, message.text)
			except Exception as e:
				print(e)
				continue

		logger.info('–†–∞—Å—Å—ã–ª–∫–∞ —Ç–µ–∫—Å—Ç–∞ {!s} [{!s}] {!s}'.format(message.from_user.first_name, uid, message.text))

		bot.send_message(cid, texts.success_email_text)
		text = '–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å'
		markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False, row_width=1)
		for x in config.admin_markup:
			markup.row(*x)
		return bot.send_message(cid, text, reply_markup=markup)

	query = database.User.select().where(database.User.uid == uid)

	# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	if not query.exists():
		logger.info('–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –±–æ—Ç–µ {!s} [{!s}]'.format(message.from_user.first_name, uid))
		bot.send_message(cid, random.choice(texts.sheet_frases), reply_markup=types.ReplyKeyboardRemove())
		bot_start_url = 'https://t.me/{!s}?start={!s}'.format(bot.get_me().username, uid)
		keyboard = types.InlineKeyboardMarkup()
		keyboard.add(types.InlineKeyboardButton('üçæ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è! üçæ', url=bot_start_url))
		return bot.send_message(cid, texts.lets_register, reply_markup=keyboard)

	user = query.get()

	# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
	if message.text == '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å':

		if uid in READY_TO_EDIT_NAME:
			del READY_TO_EDIT_NAME[uid]
		if uid in READY_TO_EDIT_AGE:
			del READY_TO_EDIT_AGE[uid]
		if uid in READY_TO_EDIT_ABOUT:
			del READY_TO_EDIT_ABOUT[uid]
		if uid in READY_TO_EDIT_PHOTO:
			del READY_TO_EDIT_PHOTO[uid]

		text = '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ'
		markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False, row_width=1)
		for x in config.main_markup:
			markup.row(*x)
		return bot.send_message(cid, text, reply_markup=markup)


	# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∫–µ—Ç—ã
	if uid in READY_TO_EDIT_NAME:
		if 'name' not in READY_TO_EDIT_NAME[uid]:
			READY_TO_EDIT_NAME[uid]['name'] = message.text

			q = database.User.update({database.User.name: READY_TO_EDIT_NAME[uid]['name']}).where(database.User.uid == uid)
			q.execute()

			del READY_TO_EDIT_NAME[uid]

			logger.info('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏ {!s} [{!s}]'.format(message.from_user.first_name, uid))

			text = '–í—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏ –∏–º—è'
			markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False, row_width=1)
			for x in config.main_markup:
				markup.row(*x)
			return bot.send_message(cid, text, reply_markup=markup)


	# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∫–µ—Ç—ã
	if uid in READY_TO_EDIT_AGE:
		if 'age' not in READY_TO_EDIT_AGE[uid]:
			
			try:
				int(message.text)
			except Exception as e:
				text = '–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!'
				return bot.send_message(cid, text)

			READY_TO_EDIT_AGE[uid]['age'] = int(message.text)

			q = database.User.update({database.User.age: READY_TO_EDIT_AGE[uid]['age']}).where(database.User.uid == uid)
			q.execute()

			del READY_TO_EDIT_AGE[uid]

			logger.info('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞ {!s} [{!s}]'.format(message.from_user.first_name, uid))

			text = '–í—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏ –≤–æ–∑—Ä–∞—Å—Ç'
			markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False, row_width=1)
			for x in config.main_markup:
				markup.row(*x)
			return bot.send_message(cid, text, reply_markup=markup)


	# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∫–µ—Ç—ã
	if uid in READY_TO_EDIT_ABOUT:
		if 'about' not in READY_TO_EDIT_ABOUT[uid]:
			READY_TO_EDIT_ABOUT[uid]['about'] = message.text

			q = database.User.update({database.User.about: READY_TO_EDIT_ABOUT[uid]['about']}).where(database.User.uid == uid)
			q.execute()

			del READY_TO_EDIT_ABOUT[uid]

			logger.info('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ —Å–µ–±–µ {!s} [{!s}]'.format(message.from_user.first_name, uid))

			text = '–í—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ'
			markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False, row_width=1)
			for x in config.main_markup:
				markup.row(*x)
			return bot.send_message(cid, text, reply_markup=markup)

	# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∫–µ—Ç—ã
	if uid in READY_TO_EDIT_PHOTO:
		if 'photo' not in READY_TO_EDIT_PHOTO[uid]:
			return bot.send_message(cid, texts.register_invite_photo)

	# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
	if message.text == 'üç∫ –•–æ—á—É –≤—ã–ø–∏—Ç—å! üç∫':
		logger.info('–•–æ—á–µ—Ç –ø–∏—Ç—å {!s} [{!s}]'.format(message.from_user.first_name, uid))

		users = database.User.select().where(database.User.uid != uid)
		if len(users) == 0:
			return bot.send_message(cid, texts.no_active_user)
		bot.send_message(cid, texts.lets_drink_text, parse_mode='HTML')
		
		text = util.generate_user_text(users[0])
		keyboard = types.InlineKeyboardMarkup()
		keyboard.add(types.InlineKeyboardButton('ü•É –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –≤—ã–ø–∏—Ç—å! ü•É', callback_data='invitedrink_{!s}'.format(users[0].id)))
		keyboard.add(types.InlineKeyboardButton('üî¥ –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è üî¥', callback_data='report_{!s}'.format(users[0].id)))
		keyboard.add(
			types.InlineKeyboardButton('‚¨ÖÔ∏è', callback_data='seeleftuser_{!s}'.format(users[0].id)),
			types.InlineKeyboardButton('‚û°Ô∏è', callback_data='seerightuser_{!s}'.format(users[0].id)),
		)
		return bot.send_photo(cid, open(users[0].photo_path, 'rb'), caption=text, reply_markup=keyboard)
	elif message.text == 'üëë –ú–æ—è –∞–Ω–∫–µ—Ç–∞ üëë':
		logger.info('–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–≤–æ–µ–π –∞–Ω–∫–µ—Ç—ã {!s} [{!s}]'.format(message.from_user.first_name, uid))
		text = '–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞:\n\n{!s}'.format(util.generate_user_text(user))
		keyboard = types.InlineKeyboardMarkup()
		keyboard.add(types.InlineKeyboardButton('‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è ‚úèÔ∏è', callback_data='editname'))
		keyboard.add(types.InlineKeyboardButton('‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç ‚úèÔ∏è', callback_data='editage'))
		keyboard.add(types.InlineKeyboardButton('‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ ‚úèÔ∏è', callback_data='editabout'))
		keyboard.add(types.InlineKeyboardButton('‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ ‚úèÔ∏è', callback_data='editphoto'))
		return bot.send_photo(cid, open(user.photo_path, 'rb'), caption=text, reply_markup=keyboard)
	elif message.text == 'üì® –ü–æ–¥–¥–µ—Ä–∂–∫–∞ üì®':
		logger.info('–ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–¥–¥–µ—Ä–∂–∫–∏ {!s} [{!s}]'.format(message.from_user.first_name, uid))
		keyboard = types.InlineKeyboardMarkup()
		keyboard.add(types.InlineKeyboardButton('–ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É', url=config.support_url))
		return bot.send_message(cid, texts.support_text, reply_markup=keyboard)
	elif message.text == 'ü•Ç –¢–æ—Å—Ç! ü•Ç':
		logger.info('–í—ã–¥–∞–Ω —Ç–æ—Å—Ç {!s} [{!s}]'.format(message.from_user.first_name, uid))
		text = util.get_tost_text()
		return bot.send_message(cid, text)


	# –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∞–¥–º–∏–Ω–∞
	if uid in config.ADMINS:
		if message.text == '–°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É':
			READY_TO_EMAIL[uid] = {}
			text = '–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º –±–æ—Ç–∞'
			markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False, row_width=1)
			markup.row('‚ùå –û—Ç–º–µ–Ω–∞')
			return bot.send_message(cid, text, reply_markup=markup)
		elif message.text == '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π':
			logger.info('–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {!s} [{!s}]'.format(message.from_user.first_name, uid))
			all_users = database.User.select()
			text = '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–æ—Ç–µ: {!s}'.format(len(all_users))
			return bot.send_message(cid, text)


@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
	cid = call.message.chat.id
	uid = call.from_user.id

	print(call.data)

	try:
		bot.answer_callback_query(call.id, '‚úÖ')
	except Exception as e:
		print(e)

	# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
	if call.data.startswith('registergender'):
		if uid not in READY_TO_REGISTER:
			bot.send_message(cid, random.choice(texts.sheet_frases), reply_markup=types.ReplyKeyboardRemove())
			bot_start_url = 'https://t.me/{!s}?start={!s}'.format(bot.get_me().username, uid)
			keyboard = types.InlineKeyboardMarkup()
			keyboard.add(types.InlineKeyboardButton('üçæ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è! üçæ', url=bot_start_url))
			return bot.edit_message_text(texts.lets_register, chat_id=cid, message_id=call.message.message_id, reply_markup=keyboard)
		gender = int(call.data.split('_')[1])
		READY_TO_REGISTER[uid]['gender'] = gender
		bot.edit_message_text('‚úÖ –í—ã–±—Ä–∞–Ω–æ!', chat_id=cid, message_id=call.message.message_id, reply_markup=None)
		return bot.send_message(cid, texts.register_ask_about)
	elif call.data.startswith('seeanket'):
		user_id = int(call.data.split('_')[1])

		logger.info('–ü–æ—Å–º–æ—Ç—Ä–µ–ª –∞–Ω–∫–µ—Ç—É {!s} [{!s}]'.format(call.from_user.first_name, uid))

		user = database.User.select().where(database.User.id == user_id)[0]

		text = util.generate_user_text(user)
		return bot.send_photo(cid, open(user.photo_path, 'rb'), caption=text)

	elif call.data.startswith('invitedrink'):
		user_id = int(call.data.split('_')[1])

		logger.info('–ü—Ä–∏–≥–ª–∞—Å–∏–ª –ø–∏—Ç—å {!s} [{!s}]'.format(call.from_user.first_name, uid))

		user = database.User.select().where(database.User.id == user_id)[0]
		my_user = database.User.select().where(database.User.uid == uid)[0]

		try:
			keyboard = types.InlineKeyboardMarkup()
			keyboard.add(types.InlineKeyboardButton('üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—É üëÄ', callback_data='seeanket_{!s}'.format(my_user.id)))
			keyboard.add(
				types.InlineKeyboardButton('‚úÖ –°–æ–≥–ª–∞—Å–∏—Ç—å—Å—è ‚úÖ', callback_data='confirmdrink_{!s}'.format(my_user.id)),
				types.InlineKeyboardButton('‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è ‚ùå', callback_data='notconfirmdrink_{!s}'.format(my_user.id))
			)
			bot.send_message(user.uid, texts.drink_invite, reply_markup=keyboard)
		except Exception as e:
			print(e)

		return bot.send_message(cid, texts.success_inviting.format(user.name))
	elif call.data.startswith('confirmdrink'):
		user_id = int(call.data.split('_')[1])

		logger.info('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø–∏—Ç—å {!s} [{!s}]'.format(call.from_user.first_name, uid))

		my_user = database.User.select().where(database.User.uid == uid)[0]
		other_user = database.User.select().where(database.User.id == user_id)[0]

		try:
			text = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {!s} —Å–æ–≥–ª–∞—Å–µ–Ω –≤—ã–ø–∏—Ç—å —Å –≤–∞–º–∏!'.format(my_user.name)

			if call.from_user.username:
				text += '\n\n–°—Å—ã–ª–∫–∞: @{!s}'.format(call.from_user.username)

			keyboard = types.InlineKeyboardMarkup()
			keyboard.add(types.InlineKeyboardButton('–°—Å—ã–ª–∫–∞ –Ω–∞ –õ–°', url='tg://user?id={!s}'.format(my_user.uid)))
			bot.send_message(other_user.uid, text, parse_mode='HTML', reply_markup=keyboard)
		except Exception as e:
			print(e)

		text = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {!s} –ø—Ä–∏–Ω—è–ª –≤–∞—à–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ!'.format(other_user.name)
		bot.delete_message(chat_id=cid, message_id=call.message.message_id)
		keyboard = types.InlineKeyboardMarkup()
		keyboard.add(types.InlineKeyboardButton('–°—Å—ã–ª–∫–∞ –Ω–∞ –õ–°', url='tg://user?id={!s}'.format(other_user.uid)))
		return bot.send_message(cid, text, reply_markup=keyboard)
	elif call.data.startswith('notconfirmdrink'):
		user_id = int(call.data.split('_')[1])

		logger.info('–û—Ç–∫–∞–∑–∞–ª—Å—è –ø–∏—Ç—å {!s} [{!s}]'.format(call.from_user.first_name, uid))

		my_user = database.User.select().where(database.User.uid == uid)[0]
		other_user = database.User.select().where(database.User.id == user_id)[0]

		try:
			text = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {!s} –æ—Ç–∫–∞–∑–∞–ª –≤–∞–º –≤ –ø—å—è–Ω–∫–µ'.format(my_user.name)
			bot.send_message(other_user.uid, text)
		except Exception as e:
			print(e)

		bot.delete_message(chat_id=cid, message_id=call.message.message_id)
		return bot.send_message(cid, '–û—Ç–∫–∞–∑–∞–Ω–æ')
	elif call.data.startswith('seeleftuser'):
		user_id = int(call.data.split('_')[1])

		logger.info('–ü–æ—Å–º–æ—Ç—Ä–µ–ª –∞–Ω–∫–µ—Ç—É {!s} [{!s}]'.format(call.from_user.first_name, uid))

		all_users = database.User.select().where(database.User.uid != uid)

		print(all_users)

		# –ù–∞–π—Ç–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		for i, x in enumerate(all_users):
			if x.id == user_id:
				try:
					prev_user = all_users[i-1]
				except Exception as e:
					# –ü—Ä–∏ –æ—à–∏–±–∫–µ –≤—ã–±—Ä–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
					prev_user = all_users[-1]

		text = util.generate_user_text(prev_user)

		# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
		if call.message.caption == text:
			text = '–ë–æ–ª—å—à–µ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'
			return bot.send_message(cid, text)

		keyboard = types.InlineKeyboardMarkup()
		keyboard.add(types.InlineKeyboardButton('ü•É –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –≤—ã–ø–∏—Ç—å! ü•É', callback_data='invitedrink_{!s}'.format(prev_user.id)))
		keyboard.add(types.InlineKeyboardButton('üî¥ –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è üî¥', callback_data='report_{!s}'.format(prev_user.id)))
		keyboard.add(
			types.InlineKeyboardButton('‚¨ÖÔ∏è', callback_data='seeleftuser_{!s}'.format(prev_user.id)),
			types.InlineKeyboardButton('‚û°Ô∏è', callback_data='seerightuser_{!s}'.format(prev_user.id)),
		)
		return bot.edit_message_media(media=types.InputMediaPhoto(open(prev_user.photo_path, 'rb'), caption=text), chat_id=cid, message_id=call.message.message_id , reply_markup=keyboard)

	elif call.data.startswith('seerightuser'):
		user_id = int(call.data.split('_')[1])

		logger.info('–ü–æ—Å–º–æ—Ç—Ä–µ–ª –∞–Ω–∫–µ—Ç—É {!s} [{!s}]'.format(call.from_user.first_name, uid))

		all_users = database.User.select().where(database.User.uid != uid)

		print(all_users)

		# –ù–∞–π—Ç–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		for i, x in enumerate(all_users):
			if x.id == user_id:
				try:
					next_user = all_users[i+1]
				except Exception as e:
					# –ü—Ä–∏ –æ—à–∏–±–∫–µ –≤—ã–±—Ä–∞—Ç—å –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
					next_user = all_users[0]

		text = util.generate_user_text(next_user)

		# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
		if call.message.caption == text:
			text = '–ë–æ–ª—å—à–µ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'
			return bot.send_message(cid, text)

		keyboard = types.InlineKeyboardMarkup()
		keyboard.add(types.InlineKeyboardButton('ü•É –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –≤—ã–ø–∏—Ç—å! ü•É', callback_data='invitedrink_{!s}'.format(next_user.id)))
		keyboard.add(types.InlineKeyboardButton('üî¥ –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è üî¥', callback_data='report_{!s}'.format(next_user.id)))
		keyboard.add(
			types.InlineKeyboardButton('‚¨ÖÔ∏è', callback_data='seeleftuser_{!s}'.format(next_user.id)),
			types.InlineKeyboardButton('‚û°Ô∏è', callback_data='seerightuser_{!s}'.format(next_user.id)),
		)
		return bot.edit_message_media(media=types.InputMediaPhoto(open(next_user.photo_path, 'rb'), caption=text), chat_id=cid, message_id=call.message.message_id , reply_markup=keyboard)
	# –ñ–∞–ª–æ–±—ã –Ω–∞ –∞–Ω–∫–µ—Ç—ã
	if call.data.startswith('report'):
		id = int(call.data.split('_')[1])
		user = database.User.select().where(database.User.uid != uid)
		text = '<b>{!s}</b> \n{!s}'.format(texts.channel_report, util.generate_user_text(].photo_path, 'rb'), caption = text, parse_mode = "HTML", reply_markup = keyboard)

	# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–Ω–∫–µ—Ç—ã
	if call.data == 'editname':
		READY_TO_EDIT_NAME[uid] = {}
		text = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è'
		markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False, row_width=1)
		markup.row('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å')
		return bot.send_message(cid, text, reply_markup=markup)
	elif call.data == 'editage':
		READY_TO_EDIT_AGE[uid] = {}
		text = '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç'
		markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False, row_width=1)
		markup.row('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å')
		return bot.send_message(cid, text, reply_markup=markup)
	elif call.data == 'editabout':
		READY_TO_EDIT_ABOUT[uid] = {}
		text = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ'
		markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False, row_width=1)
		markup.row('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å')
		return bot.send_message(cid, text, reply_markup=markup)
	elif call.data == 'editphoto':
		READY_TO_EDIT_PHOTO[uid] = {}
		text = '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ'
		markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False, row_width=1)
		markup.row('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å')
		return bot.send_message(cid, text, reply_markup=markup)


if __name__ == '__main__':
	logger.info('–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –±–æ—Ç–∞')
	main_func.main(bot)
